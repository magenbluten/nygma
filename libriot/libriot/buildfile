int_libs = # interface dependencies
imp_libs = # implementation dependencies
tst_libs = # unit test dependencies

import int_libs += libunclassified%lib{unclassified}
import int_libs += libnygma%lib{nygma}
import tst_libs += pest%lib{pest}

./: lib{riot}: {hxx ixx txx}{** -**.test... -version} hxx{version} \
  $imp_libs $int_libs

pthread_libs =
if! ( $c.target.class == 'windows' )
  pthread_libs = -lpthread

# unit tests.
#
exe{*.test}:
{
  test = true
  install = false
  cxx.libs = $pthread_libs
}

for t: cxx{**.test...}
{
  d = $directory($t)
  n = $name($t)...

  ./: $d/exe{$n}: $t $d/{hxx ixx txx}{+$n} $d/testscript{+$n} lib{riot} $tst_libs
}

# include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

# export options.
#
lib{riot}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $int_libs
}

# install into the libriot/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libriot/
  install.subdirs = true
}
