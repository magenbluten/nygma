// SPDX-License-Identifier: UNLICENSE

#include <pest/pest.hxx>

#include <libnygma/bytestring.hxx>
#include <libnygma/dissect.hxx>
#include <libnygma/dns-trace.hxx>
#include <libnygma/dns.hxx>
#include <libnygma/toeplitz.hxx>

#include <array>
#include <cstdint>
#include <type_traits>

namespace unsafe = emptyspace::unsafe;
namespace dissect = emptyspace::dissect;
namespace toeplitz = emptyspace::toeplitz;
namespace dns = emptyspace::dns;

using hash_type = toeplitz::toeplitz_scalar_lut<toeplitz::rss_key_symmetric>;
using bytestring_view = emptyspace::bytestring_view;
using dissect_tag = dissect::dissect_tag;
using dns_trace = emptyspace::dns::dns_trace;

namespace {

// clang-format off

/* Frame (74 bytes) */
static const unsigned char pkt1[74] = {
0x30, 0x46, 0x9a, 0x23, 0xfb, 0xfa, 0x6c, 0xf0, /* 0F.#..l. */
0x49, 0xb2, 0xde, 0x6e, 0x08, 0x00, 0x45, 0x00, /* I..n..E. */
0x00, 0x3c, 0x76, 0xd1, 0x00, 0x00, 0x80, 0x11, /* .<v..... */
0xaf, 0x55, 0x0a, 0x00, 0x00, 0x01, 0x0a, 0x00, /* .U...... */
0x00, 0x8a, 0xdc, 0xc8, 0x00, 0x35, 0x00, 0x28, /* .....5.( */
0xfd, 0xe8, 0x81, 0x85, 0x01, 0x00, 0x00, 0x01, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, /* .......w */
0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, /* ww.googl */
0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, /* e.com... */
0x00, 0x01                                      /* .. */
};

/* Frame (154 bytes) */
static const unsigned char pkt2[154] = {
0x6c, 0xf0, 0x49, 0xb2, 0xde, 0x6e, 0x30, 0x46, /* l.I..n0F */
0x9a, 0x23, 0xfb, 0xfa, 0x08, 0x00, 0x45, 0x00, /* .#....E. */
0x00, 0x8c, 0x00, 0x00, 0x40, 0x00, 0x40, 0x11, /* ....@.@. */
0x25, 0xd7, 0x0a, 0x00, 0x00, 0x8a, 0x0a, 0x00, /* %....... */
0x00, 0x01, 0x00, 0x35, 0xdc, 0xc8, 0x00, 0x78, /* ...5...x */
0x25, 0x0c, 0x81, 0x85, 0x81, 0x80, 0x00, 0x01, /* %....... */
0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, /* .......w */
0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, /* ww.googl */
0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, /* e.com... */
0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, /* ........ */
0x00, 0x00, 0x00, 0x70, 0x00, 0x04, 0xad, 0xc2, /* ...p.... */
0x70, 0x13, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, /* p....... */
0x00, 0x00, 0x00, 0x70, 0x00, 0x04, 0xad, 0xc2, /* ...p.... */
0x70, 0x12, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, /* p....... */
0x00, 0x00, 0x00, 0x70, 0x00, 0x04, 0xad, 0xc2, /* ...p.... */
0x70, 0x11, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, /* p....... */
0x00, 0x00, 0x00, 0x70, 0x00, 0x04, 0xad, 0xc2, /* ...p.... */
0x70, 0x10, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, /* p....... */
0x00, 0x00, 0x00, 0x70, 0x00, 0x04, 0xad, 0xc2, /* ...p.... */
0x70, 0x14                                      /* p. */
};

/* Frame (117 bytes) */
static const unsigned char pkt418[117] = {
0x01, 0x00, 0x5e, 0x00, 0x00, 0xfb, 0x58, 0x1f, /* ..^...X. */
0xaa, 0x4f, 0x3f, 0x9d, 0x08, 0x00, 0x45, 0x00, /* .O?...E. */
0x00, 0x67, 0xe2, 0xf3, 0x00, 0x00, 0xff, 0x11, /* .g...... */
0xed, 0x94, 0x0a, 0x00, 0x00, 0x02, 0xe0, 0x00, /* ........ */
0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x53, /* .......S */
0xd6, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, /* .E...... */
0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0c, 0x59, /* .......Y */
0x61, 0x65, 0x6c, 0x73, 0x2d, 0x69, 0x50, 0x68, /* aels-iPh */
0x6f, 0x6e, 0x65, 0x05, 0x6c, 0x6f, 0x63, 0x61, /* one.loca */
0x6c, 0x00, 0x00, 0xff, 0x80, 0x01, 0xc0, 0x0c, /* l....... */
0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, /* .......x */
0x00, 0x04, 0x0a, 0x00, 0x00, 0x02, 0x00, 0x00, /* ........ */
0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, /* )....... */
0x0c, 0x00, 0x04, 0x00, 0x08, 0x00, 0xdf, 0x58, /* .......X */
0x1f, 0xaa, 0x4f, 0x3f, 0x9d                    /* ..O?. */
};

/* Frame (117 bytes) */
static const unsigned char pkt419[117] = {
0x01, 0x00, 0x5e, 0x00, 0x00, 0xfb, 0x58, 0x1f, /* ..^...X. */
0xaa, 0x4f, 0x3f, 0x9d, 0x08, 0x00, 0x45, 0x00, /* .O?...E. */
0x00, 0x67, 0x07, 0xd9, 0x00, 0x00, 0xff, 0x11, /* .g...... */
0xc8, 0xaf, 0x0a, 0x00, 0x00, 0x02, 0xe0, 0x00, /* ........ */
0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x53, /* .......S */
0x56, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, /* VF...... */
0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0c, 0x59, /* .......Y */
0x61, 0x65, 0x6c, 0x73, 0x2d, 0x69, 0x50, 0x68, /* aels-iPh */
0x6f, 0x6e, 0x65, 0x05, 0x6c, 0x6f, 0x63, 0x61, /* one.loca */
0x6c, 0x00, 0x00, 0xff, 0x00, 0x01, 0xc0, 0x0c, /* l....... */
0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, /* .......x */
0x00, 0x04, 0x0a, 0x00, 0x00, 0x02, 0x00, 0x00, /* ........ */
0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, /* )....... */
0x0c, 0x00, 0x04, 0x00, 0x08, 0x00, 0xdf, 0x58, /* .......X */
0x1f, 0xaa, 0x4f, 0x3f, 0x9d                    /* ..O?. */
};

/* Frame (181 bytes) */
static const unsigned char pkt421[181] = {
0x01, 0x00, 0x5e, 0x00, 0x00, 0xfb, 0x58, 0x1f, /* ..^...X. */
0xaa, 0x4f, 0x3f, 0x9d, 0x08, 0x00, 0x45, 0x00, /* .O?...E. */
0x00, 0xa7, 0xc5, 0xe8, 0x00, 0x00, 0xff, 0x11, /* ........ */
0x0a, 0x60, 0x0a, 0x00, 0x00, 0x02, 0xe0, 0x00, /* .`...... */
0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x93, /* ........ */
0x24, 0x4d, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, /* $M...... */
0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x01, 0x32, /* .......2 */
0x01, 0x30, 0x01, 0x30, 0x02, 0x31, 0x30, 0x07, /* .0.0.10. */
0x69, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x04, /* in-addr. */
0x61, 0x72, 0x70, 0x61, 0x00, 0x00, 0x0c, 0x80, /* arpa.... */
0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x14, 0x0c, /* ....x... */
0x59, 0x61, 0x65, 0x6c, 0x73, 0x2d, 0x69, 0x50, /* Yaels-iP */
0x68, 0x6f, 0x6e, 0x65, 0x05, 0x6c, 0x6f, 0x63, /* hone.loc */
0x61, 0x6c, 0x00, 0xc0, 0x2d, 0x00, 0x01, 0x80, /* al..-... */
0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0x0a, /* ....x... */
0x00, 0x00, 0x02, 0xc0, 0x0c, 0x00, 0x2f, 0x80, /* ....../. */
0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x06, 0xc0, /* ....x... */
0x0c, 0x00, 0x02, 0x00, 0x08, 0xc0, 0x2d, 0x00, /* ......-. */
0x2f, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, /* /.....x. */
0x05, 0xc0, 0x2d, 0x00, 0x01, 0x40, 0x00, 0x00, /* ..-..@.. */
0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, /* )....... */
0x0c, 0x00, 0x04, 0x00, 0x08, 0x00, 0xdf, 0x58, /* .......X */
0x1f, 0xaa, 0x4f, 0x3f, 0x9d                    /* ..O?. */
};

/* dns-over-tcp6.pcap Frame (116 bytes) */
static const unsigned char pkt4_v6[116] = {
0x4a, 0x1d, 0x70, 0xd3, 0xac, 0x72, 0x1c, 0x36, /* J.p..r.6 */
0xbb, 0x13, 0x43, 0xe2, 0x86, 0xdd, 0x60, 0x0a, /* ..C...`. */
0x30, 0xc1, 0x00, 0x3e, 0x06, 0x40, 0x26, 0x03, /* 0..>.@&. */
0x30, 0x01, 0x19, 0x13, 0x60, 0x00, 0xd9, 0x5c, /* 0...`..\ */
0x65, 0xb3, 0xa3, 0xb1, 0xd9, 0xa4, 0x20, 0x01, /* e..... . */
0x05, 0x58, 0xfe, 0xed, 0x00, 0x00, 0x00, 0x00, /* .X...... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0x8f, /* ........ */
0x00, 0x35, 0x09, 0xe8, 0x31, 0x8b, 0x6c, 0xb0, /* .5..1.l. */
0x77, 0xf9, 0x80, 0x18, 0x08, 0x04, 0x7e, 0x34, /* w.....~4 */
0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x0c, 0x18, /* ........ */
0x46, 0x03, 0x6d, 0x5d, 0xbd, 0xa5, 0x00, 0x1c, /* F.m].... */
0x2f, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, /* /Q...... */
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0x00, /* ......0. */
0x01, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, /* ...).... */
0x80, 0x00, 0x00, 0x00                          /* .... */
};

/* dns-over-tcp6.pcap Frame (1227 bytes) */
static const unsigned char pkt6_v6[1227] = {
0x1c, 0x36, 0xbb, 0x13, 0x43, 0xe2, 0x4a, 0x1d, /* .6..C.J. */
0x70, 0xd3, 0xac, 0x72, 0x86, 0xdd, 0x64, 0x00, /* p..r..d. */
0x00, 0x00, 0x04, 0x95, 0x06, 0x3a, 0x20, 0x01, /* .....: . */
0x05, 0x58, 0xfe, 0xed, 0x00, 0x00, 0x00, 0x00, /* .X...... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x26, 0x03, /* ......&. */
0x30, 0x01, 0x19, 0x13, 0x60, 0x00, 0xd9, 0x5c, /* 0...`..\ */
0x65, 0xb3, 0xa3, 0xb1, 0xd9, 0xa4, 0x00, 0x35, /* e......5 */
0xc1, 0x8f, 0x6c, 0xb0, 0x77, 0xf9, 0x09, 0xe8, /* ..l.w... */
0x31, 0xa9, 0x80, 0x18, 0x00, 0x10, 0x33, 0xd4, /* 1.....3. */
0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x6d, 0x5d, /* ......m] */
0xbd, 0xb8, 0x0c, 0x18, 0x46, 0x03, 0x04, 0x73, /* ....F..s */
0x2f, 0x51, 0x81, 0xa0, 0x00, 0x01, 0x00, 0x04, /* /Q...... */
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0x00, /* ......0. */
0x01, 0x00, 0x00, 0x30, 0x00, 0x01, 0x00, 0x01, /* ...0.... */
0x62, 0x6d, 0x01, 0x08, 0x01, 0x00, 0x03, 0x08, /* bm...... */
0x03, 0x01, 0x00, 0x01, 0xb3, 0xf0, 0xaf, 0x1c, /* ........ */
0x2d, 0x38, 0xc1, 0x0d, 0x5a, 0xf6, 0xe5, 0x41, /* -8..Z..A */
0xb5, 0x05, 0xc0, 0x19, 0x65, 0x47, 0xb6, 0x6d, /* ....eG.m */
0x5e, 0xcb, 0xbd, 0xae, 0x0f, 0xcb, 0x77, 0x29, /* ^.....w) */
0x25, 0x2a, 0xcf, 0x60, 0x53, 0x61, 0x90, 0x4d, /* %*.`Sa.M */
0xe3, 0x9c, 0xe7, 0xd5, 0xe3, 0x86, 0xe0, 0x0f, /* ........ */
0x67, 0x85, 0xab, 0x4f, 0x4f, 0x73, 0xe9, 0x83, /* g..OOs.. */
0xcb, 0xfa, 0xfc, 0xc8, 0x20, 0x9a, 0xa7, 0x1b, /* .... ... */
0x71, 0xe2, 0xae, 0xee, 0xe1, 0x15, 0x44, 0x38, /* q.....D8 */
0xa4, 0x7d, 0x2a, 0xb0, 0xb3, 0x71, 0xae, 0xcb, /* .}*..q.. */
0x99, 0xad, 0x96, 0x26, 0x5c, 0x02, 0xa8, 0x55, /* ...&\..U */
0xaf, 0x52, 0x5c, 0xbd, 0x40, 0xa7, 0x42, 0xf2, /* .R\.@.B. */
0x83, 0x0a, 0xc8, 0xba, 0x01, 0x24, 0xd4, 0x6e, /* .....$.n */
0x2f, 0xed, 0x19, 0x3f, 0x02, 0x5b, 0x75, 0x8c, /* /..?.[u. */
0xb5, 0x08, 0x13, 0xe6, 0x72, 0x98, 0x6b, 0x52, /* ....r.kR */
0x12, 0x12, 0x2e, 0x19, 0x07, 0x57, 0xac, 0x49, /* .....W.I */
0xa3, 0xdd, 0xf7, 0xf3, 0x5d, 0x8d, 0x77, 0x1f, /* ....].w. */
0x8d, 0x97, 0xe0, 0x96, 0xb7, 0xbc, 0x94, 0xe7, /* ........ */
0xfd, 0x62, 0x10, 0x39, 0x76, 0x3b, 0xbf, 0x01, /* .b.9v;.. */
0xd7, 0x18, 0x3c, 0xa9, 0x4a, 0x1f, 0x63, 0xd1, /* ..<.J.c. */
0x3b, 0x74, 0x86, 0x49, 0xc5, 0xd7, 0x25, 0x49, /* ;t.I..%I */
0x0a, 0xb2, 0x29, 0x7e, 0x48, 0x45, 0x5a, 0x28, /* ..)~HEZ( */
0x4c, 0x28, 0xd7, 0x4c, 0xcc, 0xca, 0x6b, 0x0f, /* L(.L..k. */
0x86, 0xd5, 0xf8, 0xf0, 0xcb, 0x44, 0x0e, 0x58, /* .....D.X */
0x4a, 0x7d, 0xce, 0x3c, 0x87, 0x94, 0x9d, 0x19, /* J}.<.... */
0xfd, 0xa8, 0x15, 0x02, 0x37, 0x5d, 0x4b, 0x5d, /* ....7]K] */
0x02, 0x9b, 0xf9, 0x6d, 0xc9, 0x83, 0xe9, 0xbf, /* ...m.... */
0xe7, 0x14, 0x11, 0x40, 0x9c, 0xc9, 0xfe, 0xa5, /* ...@.... */
0xe0, 0x0e, 0x1d, 0x7e, 0x68, 0xdf, 0x8c, 0x73, /* ...~h..s */
0xd0, 0x2c, 0xb4, 0xfd, 0xbd, 0x63, 0xf6, 0x4b, /* .,...c.K */
0x16, 0x61, 0x7a, 0x70, 0xab, 0x4b, 0xdb, 0x3a, /* .azp.K.: */
0x14, 0x30, 0xde, 0x48, 0xe5, 0x0c, 0xa6, 0x79, /* .0.H...y */
0x29, 0x09, 0x27, 0x37, 0x00, 0x00, 0x30, 0x00, /* ).'7..0. */
0x01, 0x00, 0x01, 0x62, 0x6d, 0x01, 0x08, 0x01, /* ...bm... */
0x00, 0x03, 0x08, 0x03, 0x01, 0x00, 0x01, 0xc4, /* ........ */
0xd0, 0xc9, 0xa2, 0x1e, 0xea, 0x7b, 0x77, 0xc5, /* .....{w. */
0x23, 0xce, 0x1b, 0x62, 0xff, 0x61, 0xfc, 0x01, /* #..b.a.. */
0x90, 0xe5, 0x53, 0x24, 0xde, 0xa6, 0x96, 0x76, /* ..S$...v */
0x76, 0xe3, 0xd3, 0xb9, 0x46, 0xdb, 0x77, 0x65, /* v...F.we */
0x24, 0x50, 0x1f, 0x14, 0x12, 0x5b, 0xad, 0x40, /* $P...[.@ */
0x38, 0x36, 0x30, 0xe9, 0xbb, 0xe0, 0xc6, 0xba, /* 860..... */
0xc6, 0xab, 0xc7, 0x9e, 0x3a, 0xe7, 0xa7, 0x16, /* ....:... */
0x37, 0x12, 0x62, 0x03, 0x40, 0x31, 0xc0, 0x58, /* 7.b.@1.X */
0xa0, 0x46, 0x18, 0x98, 0xa0, 0xd6, 0xe9, 0xef, /* .F...... */
0x44, 0xaf, 0x25, 0xb8, 0x65, 0xa4, 0xff, 0x30, /* D.%.e..0 */
0x2a, 0xbe, 0xf0, 0x09, 0xb4, 0xea, 0x84, 0x78, /* *......x */
0xd3, 0x10, 0x00, 0xdd, 0xf0, 0xa5, 0x38, 0xce, /* ......8. */
0x90, 0x8d, 0x17, 0x13, 0xf3, 0x9b, 0x4f, 0xe3, /* ......O. */
0x51, 0xa8, 0xf7, 0x8e, 0x80, 0x89, 0xc0, 0x46, /* Q......F */
0x3f, 0xc5, 0xce, 0x3f, 0xf0, 0x23, 0xd5, 0xa2, /* ?..?.#.. */
0x3f, 0xa0, 0xf4, 0x46, 0xcd, 0x19, 0xdb, 0xa1, /* ?..F.... */
0x43, 0xd4, 0xa2, 0x4f, 0xc0, 0xcd, 0x33, 0x67, /* C..O..3g */
0x5b, 0x99, 0xe9, 0x05, 0x4e, 0xbd, 0xf8, 0x1b, /* [...N... */
0xa2, 0x23, 0x06, 0x04, 0xee, 0x64, 0x0e, 0x88, /* .#...d.. */
0xd0, 0x45, 0x78, 0xfc, 0xaf, 0x8d, 0x00, 0x5d, /* .Ex....] */
0xa2, 0x2b, 0x98, 0x6e, 0x6b, 0x83, 0xdc, 0xfc, /* .+.nk... */
0xb4, 0x23, 0x28, 0xe5, 0x07, 0x1c, 0xd9, 0x51, /* .#(....Q */
0x76, 0xea, 0x2e, 0xc4, 0x4b, 0xf6, 0x06, 0x05, /* v...K... */
0x90, 0x2a, 0x9e, 0x4d, 0x8d, 0xbd, 0x22, 0x4e, /* .*.M.."N */
0xee, 0xb2, 0xec, 0xcc, 0x4d, 0xaf, 0x89, 0x45, /* ....M..E */
0x22, 0xf3, 0xe8, 0xa1, 0x92, 0xe5, 0x14, 0x89, /* "....... */
0xec, 0x24, 0xd2, 0x32, 0x36, 0x60, 0xf1, 0xa3, /* .$.26`.. */
0x5a, 0x51, 0xb3, 0x76, 0x76, 0xf1, 0xa1, 0x6a, /* ZQ.vv..j */
0x42, 0x4f, 0x87, 0xdd, 0x87, 0x9c, 0xbb, 0xcc, /* BO...... */
0x03, 0x74, 0xde, 0x7c, 0x58, 0x1b, 0x28, 0x9a, /* .t.|X.(. */
0x61, 0x14, 0xd3, 0xc0, 0xdc, 0x15, 0x92, 0x28, /* a......( */
0xb6, 0x74, 0xd9, 0xc4, 0x56, 0x5e, 0xa3, 0x00, /* .t..V^.. */
0x00, 0x30, 0x00, 0x01, 0x00, 0x01, 0x62, 0x6d, /* .0....bm */
0x01, 0x08, 0x01, 0x01, 0x03, 0x08, 0x03, 0x01, /* ........ */
0x00, 0x01, 0xac, 0xff, 0xb4, 0x09, 0xbc, 0xc9, /* ........ */
0x39, 0xf8, 0x31, 0xf7, 0xa1, 0xe5, 0xec, 0x88, /* 9.1..... */
0xf7, 0xa5, 0x92, 0x55, 0xec, 0x53, 0x04, 0x0b, /* ...U.S.. */
0xe4, 0x32, 0x02, 0x73, 0x90, 0xa4, 0xce, 0x89, /* .2.s.... */
0x6d, 0x6f, 0x90, 0x86, 0xf3, 0xc5, 0xe1, 0x77, /* mo.....w */
0xfb, 0xfe, 0x11, 0x81, 0x63, 0xaa, 0xec, 0x7a, /* ....c..z */
0xf1, 0x46, 0x2c, 0x47, 0x94, 0x59, 0x44, 0xc4, /* .F,G.YD. */
0xe2, 0xc0, 0x26, 0xbe, 0x5e, 0x98, 0xbb, 0xcd, /* ..&.^... */
0xed, 0x25, 0x97, 0x82, 0x72, 0xe1, 0xe3, 0xe0, /* .%..r... */
0x79, 0xc5, 0x09, 0x4d, 0x57, 0x3f, 0x0e, 0x83, /* y..MW?.. */
0xc9, 0x2f, 0x02, 0xb3, 0x2d, 0x35, 0x13, 0xb1, /* ./..-5.. */
0x55, 0x0b, 0x82, 0x69, 0x29, 0xc8, 0x0d, 0xd0, /* U..i)... */
0xf9, 0x2c, 0xac, 0x96, 0x6d, 0x17, 0x76, 0x9f, /* .,..m.v. */
0xd5, 0x86, 0x7b, 0x64, 0x7c, 0x3f, 0x38, 0x02, /* ..{d|?8. */
0x9a, 0xbd, 0xc4, 0x81, 0x52, 0xeb, 0x8f, 0x20, /* ....R..  */
0x71, 0x59, 0xec, 0xc5, 0xd2, 0x32, 0xc7, 0xc1, /* qY...2.. */
0x53, 0x7c, 0x79, 0xf4, 0xb7, 0xac, 0x28, 0xff, /* S|y...(. */
0x11, 0x68, 0x2f, 0x21, 0x68, 0x1b, 0xf6, 0xd6, /* .h/!h... */
0xab, 0xa5, 0x55, 0x03, 0x2b, 0xf6, 0xf9, 0xf0, /* ..U.+... */
0x36, 0xbe, 0xb2, 0xaa, 0xa5, 0xb3, 0x77, 0x8d, /* 6.....w. */
0x6e, 0xeb, 0xfb, 0xa6, 0xbf, 0x9e, 0xa1, 0x91, /* n....... */
0xbe, 0x4a, 0xb0, 0xca, 0xea, 0x75, 0x9e, 0x2f, /* .J...u./ */
0x77, 0x3a, 0x1f, 0x90, 0x29, 0xc7, 0x3e, 0xcb, /* w:..).>. */
0x8d, 0x57, 0x35, 0xb9, 0x32, 0x1d, 0xb0, 0x85, /* .W5.2... */
0xf1, 0xb8, 0xe2, 0xd8, 0x03, 0x8f, 0xe2, 0x94, /* ........ */
0x19, 0x92, 0x54, 0x8c, 0xee, 0x0d, 0x67, 0xdd, /* ..T...g. */
0x45, 0x47, 0xe1, 0x1d, 0xd6, 0x3a, 0xf9, 0xc9, /* EG...:.. */
0xfc, 0x1c, 0x54, 0x66, 0xfb, 0x68, 0x4c, 0xf0, /* ..Tf.hL. */
0x09, 0xd7, 0x19, 0x7c, 0x2c, 0xf7, 0x9e, 0x79, /* ...|,..y */
0x2a, 0xb5, 0x01, 0xe6, 0xa8, 0xa1, 0xca, 0x51, /* *......Q */
0x9a, 0xf2, 0xcb, 0x9b, 0x5f, 0x63, 0x67, 0xe9, /* ...._cg. */
0x4c, 0x0d, 0x47, 0x50, 0x24, 0x51, 0x35, 0x7b, /* L.GP$Q5{ */
0xe1, 0xb5, 0x00, 0x00, 0x2e, 0x00, 0x01, 0x00, /* ........ */
0x01, 0x62, 0x6d, 0x01, 0x13, 0x00, 0x30, 0x08, /* .bm...0. */
0x00, 0x00, 0x02, 0xa3, 0x00, 0x5d, 0xae, 0x46, /* .....].F */
0x80, 0x5d, 0x92, 0x97, 0x00, 0x4f, 0x66, 0x00, /* .]...Of. */
0x2f, 0x82, 0x3a, 0x5c, 0xe9, 0x39, 0x72, 0xd7, /* /.:\.9r. */
0x7e, 0x4a, 0x24, 0x2e, 0x37, 0xd9, 0x6f, 0x9a, /* ~J$.7.o. */
0x44, 0xbf, 0x65, 0xa4, 0x8f, 0x9f, 0xaa, 0x0b, /* D.e..... */
0xbd, 0xb1, 0x49, 0x88, 0x85, 0x18, 0x10, 0x9e, /* ..I..... */
0x98, 0x87, 0x32, 0xea, 0x7a, 0x79, 0x4a, 0x34, /* ..2.zyJ4 */
0x0f, 0x84, 0xb7, 0x73, 0xbe, 0x97, 0x27, 0xf9, /* ...s..'. */
0xbc, 0xf1, 0x5d, 0x41, 0x00, 0xd1, 0x40, 0xb3, /* ..]A..@. */
0x4a, 0x12, 0x89, 0x6d, 0x49, 0x3e, 0x0f, 0x3a, /* J..mI>.: */
0xf9, 0xa0, 0x5f, 0x0f, 0x0c, 0xe3, 0x4c, 0x4b, /* .._...LK */
0x10, 0xae, 0x83, 0xc3, 0x75, 0x0e, 0xd8, 0x62, /* ....u..b */
0x08, 0xe4, 0x60, 0xd8, 0x12, 0x25, 0xa1, 0x0f, /* ..`..%.. */
0x71, 0x75, 0x3b, 0x2e, 0xee, 0xf6, 0x5a, 0x93, /* qu;...Z. */
0x0f, 0x3d, 0xdb, 0x26, 0xd9, 0x5c, 0x74, 0x25, /* .=.&.\t% */
0xa9, 0xc1, 0xd1, 0x87, 0x0a, 0x91, 0x98, 0x20, /* .......  */
0x17, 0x1e, 0x1e, 0x26, 0xf7, 0xe4, 0x8c, 0x99, /* ...&.... */
0xe6, 0x56, 0xe6, 0xa6, 0x4d, 0x84, 0x3c, 0x55, /* .V..M.<U */
0x6f, 0xe5, 0xa5, 0xf2, 0x45, 0x55, 0x16, 0x38, /* o...EU.8 */
0xa4, 0xeb, 0x14, 0x88, 0x06, 0xd2, 0xe7, 0xf8, /* ........ */
0x58, 0xea, 0x25, 0x81, 0x92, 0x4b, 0x14, 0xe9, /* X.%..K.. */
0xe2, 0xe6, 0x22, 0x53, 0xa8, 0xd3, 0x4d, 0x98, /* .."S..M. */
0xce, 0x55, 0x9f, 0x3a, 0x97, 0x99, 0x70, 0x90, /* .U.:..p. */
0xf2, 0x22, 0x95, 0x5d, 0xe4, 0xc9, 0xa6, 0x1c, /* .".].... */
0x60, 0x0b, 0xb1, 0xda, 0xc8, 0x4c, 0x1d, 0xaa, /* `....L.. */
0x61, 0xc2, 0x10, 0x46, 0x75, 0x09, 0x24, 0x03, /* a..Fu.$. */
0x3e, 0x52, 0xc6, 0xf3, 0xb0, 0x21, 0x19, 0x35, /* >R...!.5 */
0x7d, 0x3b, 0x36, 0x5a, 0x65, 0x4c, 0x77, 0x64, /* };6ZeLwd */
0xbe, 0xc6, 0x56, 0x73, 0x87, 0xaa, 0x3b, 0x16, /* ..Vs..;. */
0x2f, 0x50, 0x21, 0xe3, 0x4c, 0x07, 0x24, 0x2a, /* /P!.L.$* */
0x8f, 0xb0, 0x3e, 0x80, 0xea, 0xd1, 0xfa, 0x0d, /* ..>..... */
0x76, 0x52, 0x42, 0x54, 0xef, 0xdb, 0xbe, 0x71, /* vRBT...q */
0xa8, 0xd6, 0x2e, 0x75, 0xad, 0x4f, 0x62, 0x53, /* ...u.ObS */
0x60, 0xd1, 0xf0, 0xed, 0x45, 0x82, 0x1b, 0x67, /* `...E..g */
0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x00, 0x80, /* ..)..... */
0x00, 0x00, 0x00                                /* ... */
};

/* Frame (84 bytes) */
static const unsigned char pkt21[84] = {
0x33, 0x33, 0x00, 0x01, 0x00, 0x03, 0x6c, 0xf0, /* 33....l. */
0x49, 0xb2, 0xde, 0x6e, 0x86, 0xdd, 0x60, 0x00, /* I..n..`. */
0x00, 0x00, 0x00, 0x1e, 0x11, 0x01, 0xfe, 0x80, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0xc7, /* ......M. */
0xf5, 0x93, 0x1f, 0x7b, 0xdc, 0x11, 0xff, 0x02, /* ...{.... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0xca, 0x7d, /* .......} */
0x14, 0xeb, 0x00, 0x1e, 0x63, 0xf7, 0xa7, 0x06, /* ....c... */
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x04, 0x77, 0x70, 0x61, 0x64, 0x00, /* ...wpad. */
0x00, 0x01, 0x00, 0x01                          /* .... */
};

// clang-format on

emptyspace::pest::suite basic( "dissect dns suite", []( auto& test ) {
  using namespace emptyspace::pest;

  test( "assume dns pkt1", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt1 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( hash, equal_to( 1363366211u ) );
  } );

  test( "dissect dns pkt1", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt1 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0x8185u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 0u ) );
    expect( dns._nscount, equal_to( 0u ) );
    expect( dns._ancount, equal_to( 0u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 1u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 1u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[0]._class, equal_to( 1u ) );
    expect( dns._rr[0]._type, equal_to( 1u ) );
    expect( hash, equal_to( 1363366211u ) );
  } );

  test( "dissect dns pkt2", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt2 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0x8185u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 0u ) );
    expect( dns._nscount, equal_to( 0u ) );
    expect( dns._ancount, equal_to( 5u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 1u ) );
    expect( dns._ra, equal_to( 1u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 6u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[0]._class, equal_to( 1u ) );
    expect( dns._rr[0]._type, equal_to( 1u ) );
    expect( dns._rr[0]._is_compressed, equal_to( 0u ) );
    expect( dns._rr[1].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[1]._class, equal_to( 1u ) );
    expect( dns._rr[1]._type, equal_to( 1u ) );
    expect( dns._rr[1]._is_compressed, equal_to( 1u ) );
    expect( dns._rr[2].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[2]._class, equal_to( 1u ) );
    expect( dns._rr[2]._type, equal_to( 1u ) );
    expect( dns._rr[2]._is_compressed, equal_to( 1u ) );
    expect( dns._rr[3].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[3]._class, equal_to( 1u ) );
    expect( dns._rr[3]._type, equal_to( 1u ) );
    expect( dns._rr[3]._is_compressed, equal_to( 1u ) );
    expect( dns._rr[4].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[4]._class, equal_to( 1u ) );
    expect( dns._rr[4]._type, equal_to( 1u ) );
    expect( dns._rr[4]._is_compressed, equal_to( 1u ) );
    expect( dns._rr[5].label(), equal_to( "www.google.com." ) );
    expect( dns._rr[5]._class, equal_to( 1u ) );
    expect( dns._rr[5]._type, equal_to( 1u ) );
    expect( dns._rr[5]._is_compressed, equal_to( 1u ) );
    expect( hash, equal_to( 1363366211u ) );
  } );

  test( "dissect dns pkt418", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt418 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 1u ) );
    expect( dns._nscount, equal_to( 1u ) );
    expect( dns._ancount, equal_to( 0u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 0u ) );
    expect( dns._ra, equal_to( 0u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 3u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "Yaels-iPhone.local." ) );
    expect( dns._rr[0]._class, equal_to( 0x8001u ) );
    expect( dns._rr[0]._type, equal_to( 0xffu ) );
    expect( dns._rr[0]._is_compressed, equal_to( 0u ) );
    expect( dns._rr[1].label(), equal_to( "Yaels-iPhone.local." ) );
    expect( dns._rr[1]._class, equal_to( 1u ) );
    expect( dns._rr[1]._type, equal_to( 1u ) );
    expect( dns._rr[1]._ttl, equal_to( 120u ) );
    expect( dns._rr[1]._rdata_len, equal_to( 4u ) );
    expect( dns._rr[1]._is_compressed, equal_to( 1u ) );
    expect( dns._rr[2].label(), equal_to( "" ) );
    expect( dns._rr[2]._is_edns0, equal_to( 1u ) );
    expect( dns._rr[2]._edns0._do, equal_to( 0u ) );
    expect( dns._rr[2]._edns0._z, equal_to( 0x1194u ) );
    expect( dns._rr[2]._edns0._version, equal_to( 0u ) );
    expect( dns._rr[2]._edns0._cache_flush, equal_to( 0u ) );
    expect( dns._rr[2]._edns0._udp_size, equal_to( 0x5a0u ) );
    expect( dns._rr[2]._is_compressed, equal_to( 0u ) );
    expect( hash, equal_to( 1168786858u ) );
  } );

  test( "dissect dns pkt419", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt419 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 1u ) );
    expect( dns._nscount, equal_to( 1u ) );
    expect( dns._ancount, equal_to( 0u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 0u ) );
    expect( dns._ra, equal_to( 0u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 3u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "Yaels-iPhone.local." ) );
    expect( dns._rr[0]._class, equal_to( 0x0001u ) );
    expect( dns._rr[0]._type, equal_to( 0xffu ) );
    expect( dns._rr[0]._is_compressed, equal_to( 0u ) );
    expect( dns._rr[1].label(), equal_to( "Yaels-iPhone.local." ) );
    expect( dns._rr[1]._class, equal_to( 1u ) );
    expect( dns._rr[1]._type, equal_to( 1u ) );
    expect( dns._rr[1]._ttl, equal_to( 120u ) );
    expect( dns._rr[1]._rdata_len, equal_to( 4u ) );
    expect( dns._rr[1]._is_compressed, equal_to( 1u ) );
    expect( dns._rr[2].label(), equal_to( "" ) );
    expect( dns._rr[2]._is_edns0, equal_to( 1u ) );
    expect( dns._rr[2]._edns0._do, equal_to( 0u ) );
    expect( dns._rr[2]._edns0._z, equal_to( 0x1194u ) );
    expect( dns._rr[2]._edns0._version, equal_to( 0u ) );
    expect( dns._rr[2]._edns0._cache_flush, equal_to( 0u ) );
    expect( dns._rr[2]._edns0._udp_size, equal_to( 0x5a0u ) );
    expect( dns._rr[2]._is_compressed, equal_to( 0u ) );
    expect( hash, equal_to( 1168786858u ) );
  } );

  test( "dissect dns pkt421", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt421 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0u ) );
    expect( dns._qdcount, equal_to( 0u ) );
    expect( dns._arcount, equal_to( 3u ) );
    expect( dns._nscount, equal_to( 0u ) );
    expect( dns._ancount, equal_to( 2u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 0u ) );
    expect( dns._ra, equal_to( 0u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 5u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "2.0.0.10.in-addr.arpa." ) );
    expect( dns._rr[0]._class, equal_to( 0x8001u ) );
    expect( dns._rr[0]._type, equal_to( 12 ) );
    expect( dns._rr[0]._ttl, equal_to( 120u ) );
    expect( dns._rr[0]._rdata_len, equal_to( 20u ) );
    expect( dns._rr[0]._is_compressed, equal_to( 0u ) );

    expect( dns._rr[1].label(), equal_to( "Yaels-iPhone.local." ) );
    expect( dns._rr[1]._class, equal_to( 0x8001u ) );
    expect( dns._rr[1]._type, equal_to( 1u ) );
    expect( dns._rr[1]._ttl, equal_to( 120u ) );
    expect( dns._rr[1]._rdata_len, equal_to( 4u ) );
    expect( dns._rr[1]._is_compressed, equal_to( 1u ) );

    expect( dns._rr[2].label(), equal_to( "2.0.0.10.in-addr.arpa." ) );
    expect( dns._rr[2]._class, equal_to( 0x8001u ) );
    expect( dns._rr[2]._type, equal_to( 47u ) );
    expect( dns._rr[2]._ttl, equal_to( 120u ) );
    expect( dns._rr[2]._rdata_len, equal_to( 6u ) );
    expect( dns._rr[2]._is_compressed, equal_to( 1u ) );

    expect( dns._rr[3].label(), equal_to( "Yaels-iPhone.local." ) );
    expect( dns._rr[3]._class, equal_to( 0x8001u ) );
    expect( dns._rr[3]._type, equal_to( 47u ) );
    expect( dns._rr[3]._ttl, equal_to( 120u ) );
    expect( dns._rr[3]._rdata_len, equal_to( 5u ) );
    expect( dns._rr[3]._is_compressed, equal_to( 1u ) );

    expect( dns._rr[4].label(), equal_to( "" ) );
    expect( dns._rr[4]._is_edns0, equal_to( 1u ) );
    expect( dns._rr[4]._edns0._do, equal_to( 0u ) );
    expect( dns._rr[4]._edns0._z, equal_to( 0x1194u ) );
    expect( dns._rr[4]._edns0._version, equal_to( 0u ) );
    expect( dns._rr[4]._edns0._cache_flush, equal_to( 0u ) );
    expect( dns._rr[4]._edns0._udp_size, equal_to( 0x5a0u ) );
    expect( dns._rr[4]._is_compressed, equal_to( 0u ) );

    expect( hash, equal_to( 1168786858u ) );
  } );

  test( "assume dns pkt4_v6", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt4_v6 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( hash, equal_to( 1141720077u ) );
  } );

  test( "parse dns pkt4_v6", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt4_v6 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0x2f51u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 1u ) );
    expect( dns._nscount, equal_to( 0u ) );
    expect( dns._ancount, equal_to( 0u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 1u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 2u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "" ) );
    expect( dns._rr[0]._class, equal_to( 1u ) );
    expect( dns._rr[0]._type, equal_to( 48u ) );
    expect( dns._rr[0]._is_edns0, equal_to( 0u ) );

    expect( dns._rr[1].label(), equal_to( "" ) );
    expect( dns._rr[1]._type, equal_to( 41u ) );
    expect( dns._rr[1]._rdata_len, equal_to( 0u ) );
    expect( dns._rr[1]._edns0._do, equal_to( 1u ) );
    expect( dns._rr[1]._is_edns0, equal_to( 1u ) );
    expect( dns._rr[1]._edns0._z, equal_to( 0u ) );
    expect( dns._rr[1]._edns0._version, equal_to( 0u ) );
    expect( dns._rr[1]._edns0._udp_size, equal_to( 0u ) );
    expect( dns._rr[1]._is_compressed, equal_to( 0u ) );

    expect( hash, equal_to( 1141720077u ) );
  } );

  test( "parse dns pkt6_v6", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt6_v6 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0x2f51u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 1u ) );
    expect( dns._nscount, equal_to( 0u ) );
    expect( dns._ancount, equal_to( 4u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 1u ) );
    expect( dns._ra, equal_to( 1u ) );
    expect( dns._aa, equal_to( 0u ) );
    expect( dns._ad, equal_to( 1u ) );
    expect( dns._cd, equal_to( 0u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 6u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "" ) );
    expect( dns._rr[0]._class, equal_to( 1u ) );
    expect( dns._rr[0]._type, equal_to( 48u ) );
    expect( dns._rr[0]._is_edns0, equal_to( 0u ) );

    expect( dns._rr[1].label(), equal_to( "" ) );
    expect( dns._rr[1]._type, equal_to( 48u ) );
    expect( dns._rr[1]._ttl, equal_to( 90733u ) );
    expect( dns._rr[1]._rdata_len, equal_to( 264u ) );
    expect( dns._rr[1]._is_compressed, equal_to( 0u ) );

    expect( dns._rr[2].label(), equal_to( "" ) );
    expect( dns._rr[2]._type, equal_to( 48u ) );
    expect( dns._rr[2]._ttl, equal_to( 90733u ) );
    expect( dns._rr[2]._rdata_len, equal_to( 264u ) );
    expect( dns._rr[2]._is_compressed, equal_to( 0u ) );

    expect( dns._rr[3].label(), equal_to( "" ) );
    expect( dns._rr[3]._type, equal_to( 48u ) );
    expect( dns._rr[3]._ttl, equal_to( 90733u ) );
    expect( dns._rr[3]._rdata_len, equal_to( 264u ) );
    expect( dns._rr[3]._is_compressed, equal_to( 0u ) );

    expect( dns._rr[4].label(), equal_to( "" ) );
    expect( dns._rr[4]._type, equal_to( 46u ) );
    expect( dns._rr[4]._ttl, equal_to( 90733u ) );
    expect( dns._rr[4]._rdata_len, equal_to( 275u ) );
    expect( dns._rr[4]._is_compressed, equal_to( 0u ) );

    expect( dns._rr[5].label(), equal_to( "" ) );
    expect( dns._rr[5]._type, equal_to( 41u ) );
    expect( dns._rr[5]._rdata_len, equal_to( 0u ) );
    expect( dns._rr[5]._edns0._do, equal_to( 1u ) );
    expect( dns._rr[5]._is_edns0, equal_to( 1u ) );
    expect( dns._rr[5]._edns0._z, equal_to( 0u ) );
    expect( dns._rr[5]._edns0._version, equal_to( 0u ) );
    expect( dns._rr[5]._edns0._udp_size, equal_to( 512u ) );
    expect( dns._rr[5]._is_compressed, equal_to( 0u ) );

    expect( hash, equal_to( 1141720077u ) );
  } );

  test( "parse dns pkt21", []( auto& expect ) {
    auto trace = dns_trace{};
    auto const hash_policy = hash_type{};
    auto const bs = bytestring_view{ pkt21 };
    auto const hash = dissect::dissect_en10mb( hash_policy, trace, bs );

    expect( trace._assume_dns, equal_to( true ) );
    expect( trace.valid(), equal_to( true ) );

    dns::dns_t dns;
    auto rc = dns.dissect( trace._dns_begin, trace._end );

    expect( dns._is_header_finished, equal_to( true ) );
    expect( dns._id, equal_to( 0xa706u ) );
    expect( dns._qdcount, equal_to( 1u ) );
    expect( dns._arcount, equal_to( 0u ) );
    expect( dns._nscount, equal_to( 0u ) );
    expect( dns._ancount, equal_to( 0u ) );
    expect( dns._opcode, equal_to( 0u ) );
    expect( dns._rd, equal_to( 0u ) );
    expect( dns._ra, equal_to( 0u ) );
    expect( dns._aa, equal_to( 0u ) );
    expect( dns._ad, equal_to( 0u ) );
    expect( dns._cd, equal_to( 0u ) );
    expect( dns._qr, equal_to( 0u ) );

    expect( rc, equal_to( dns::dns_dissect_rc::ok ) );
    expect( dns._rr_count, equal_to( 1u ) );
    expect( dns._is_packet_finished, equal_to( true ) );

    expect( dns._rr[0].label(), equal_to( "wpad." ) );
    expect( dns._rr[0]._class, equal_to( 1u ) );
    expect( dns._rr[0]._type, equal_to( 1u ) );
    expect( dns._rr[0]._is_edns0, equal_to( 0u ) );
    expect( dns._rr[0]._is_compressed, equal_to( 0u ) );

    expect( hash, equal_to( 380180137u ) );
  } );
} );

} // namespace

int main() {
  basic( std::clog );
  return ( EXIT_SUCCESS );
}
